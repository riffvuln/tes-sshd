name: CI
on:
  workflow_dispatch:
  schedule:
    - cron: '0 */5 * * *'  # Run every 5 hours
jobs:
  build:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.FINE_GRAINED_PAT }}  # Use fine-grained PAT for checkout
      - name: Debug pwd
        run: |
          pwd
      - name: Add Cloudflare repository
        run: |
          sudo mkdir -p --mode=0755 /usr/share/keyrings
          curl -fsSL https://pkg.cloudflare.com/cloudflare-main.gpg | sudo tee /usr/share/keyrings/cloudflare-main.gpg >/dev/null
          echo 'deb [signed-by=/usr/share/keyrings/cloudflare-main.gpg] https://pkg.cloudflare.com/cloudflared jammy main' | sudo tee /etc/apt/sources.list.d/cloudflared.list
          sudo apt-get update
      - name: Cache apt packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: cloudflared
          version: 1.0
      - name: Install SSH server
        run: |
          sudo apt-get update
          sudo apt-get install -y openssh-server
          sudo systemctl enable ssh
          sudo systemctl start ssh
      - name: Configure SSH
        run: |
          sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin yes/' /etc/ssh/sshd_config
          sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
          sudo sed -i 's/#PermitEmptyPasswords no/PermitEmptyPasswords yes/' /etc/ssh/sshd_config
          echo "root:$(openssl rand -base64 12)" | sudo chpasswd  # Set a random password for root
          sudo passwd -d root  # Remove the password for root to allow empty password
          sudo systemctl restart ssh
      - name: Debug - List directory contents
        run: ls -la
      - name: Run Spigot and cloudflared with auto-restart and workflow recreation
        if: "!contains(github.event.head_commit.message, 'Auto commit every 30 seconds [no ci]')"
        continue-on-error: true
        env:
          FINE_GRAINED_PAT: ${{ secrets.FINE_GRAINED_PAT }}
          REPO: ${{ github.repository }}
          CF_TUNNEL_CERT: ${{secrets.CF_CERT}}
          CF_TUNNEL_UUID: ${{secrets.CF_TUNNEL_UUID}}
          CF_TUNNEL_UUID_CONTENT: ${{secrets.CF_TUNNEL_UUID_CONTENT}}
        run: |
          cd $GITHUB_WORKSPACE
          mkdir ~/.cloudflared
          echo "${CF_TUNNEL_CERT}" > ~/.cloudflared/cert.pem
          touch tunnel-config.yml
          echo "${CF_TUNNEL_UUID_CONTENT}" > credentials.json
          echo "url: tcp://localhost:22" >> tunnel-config.yml
          echo "tunnel: ${CF_TUNNEL_UUID}" >> tunnel-config.yml
          echo "credentials-file: credentials.json" >> tunnel-config.yml

          start_ssh() {
            echo "Starting SSH server..."
            sudo systemctl restart ssh 2>&1 | sed '/login:/s/.*/<REDACTED>/' &
            SSH_PID=$!
            echo "SSH started with PID $SSH_PID"
          }

          run_user_this() {
            echo "running run-this.sh"
            sudo bash run-this.sh &
            RUN_THIS_PID=$!
            echo "RUN PID: $RUN_THIS_PID"
          }
          
          start_cloudflared() {
            cloudflared tunnel --config tunnel-config.yml run ${CF_TUNNEL_UUID} &
            CLOUDFLARED_PID=$!
            echo "Cloudflare Tunnel started with PID $CLOUDFLARED_PID"
          }

          # Function to commit and push changes
          commit_and_push() {
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add -A  # Stage all changes
            git reset -- tunnel-config.yml
            git reset -- credentials.json
            git reset -- logs/
            
            if ! git commit -m "Auto commit every 30 seconds [no ci]" &> /dev/null ; then
                echo "No changes to commit or commit failed" &> /dev/null
                return 1
            fi
            
            for i in {1..3}; do
                if git push https://x-access-token:${FINE_GRAINED_PAT}@github.com/${GITHUB_REPOSITORY}.git HEAD:main --force &> /dev/null; then
                    echo "Push successful on attempt $i" &> /dev/null
                    return 0
                else
                    echo "Push failed on attempt $i, retrying..." &> /dev/null
                    git pull --rebase &> /dev/null
                fi
            done
            
            echo "Failed to push after 3 attempts" &> /dev/null
            return 1
          }
          
          delete_auto_commit_workflows() {
            workflow_ids=$(curl -s -H "Authorization: token $FINE_GRAINED_PAT" \
              "https://api.github.com/repos/${REPO}/actions/runs" | \
              jq '.workflow_runs[] | select(.head_commit.message | contains("Auto commit every 30 seconds")) | .id')
            for id in $workflow_ids; do
              echo "Deleting workflow run $id" &> /dev/null
              curl -s -X DELETE -H "Authorization: token $FINE_GRAINED_PAT" \
                "https://api.github.com/repos/${REPO}/actions/runs/$id" &> /dev/null
            done
          }

          create_new_workflow_run() {
            curl -X POST -H "Authorization: token $FINE_GRAINED_PAT" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${REPO}/actions/workflows/blank.yml/dispatches" \
              -d '{"ref":"main"}'
            echo "New workflow run created"
          }

          cancel_old_workflow_runs() {
            current_run_id=$GITHUB_RUN_ID
            workflow_runs=$(curl -s -H "Authorization: token $FINE_GRAINED_PAT" \
              "https://api.github.com/repos/${REPO}/actions/runs?branch=main&status=in_progress")
            
            echo "$workflow_runs" | jq -r ".workflow_runs[] | select(.id != $current_run_id) | .id" | while read -r run_id; do
              echo "Cancelling workflow run $run_id"
              curl -s -X POST -H "Authorization: token $FINE_GRAINED_PAT" \
                "https://api.github.com/repos/${REPO}/actions/runs/$run_id/cancel"
            done
          }

          run_user_this
          start_ssh
          start_cloudflared
          
          START_TIME=$(date +%s)
          
          # Schedule the cancellation of old workflow runs after 30 seconds
          (sleep 30 && cancel_old_workflow_runs) &
          (sleep 20 && rm credentials.json) &
          
          while true; do
            if ! commit_and_push; then
                echo "Commit and push failed, continuing without stopping the workflow" &> /dev/null
            fi
            delete_auto_commit_workflows
            
            CURRENT_TIME=$(date +%s)
            ELAPSED_TIME=$((CURRENT_TIME - START_TIME))
            
            if ! kill -0 $CLOUDFLARED_PID 2>/dev/null || [ $ELAPSED_TIME -ge 18000 ]; then
              if ! kill -0 $CLOUDFLARED_PID 2>/dev/null; then
                echo "Cloudflare Tunnel process has stopped."
              else
                echo "Workflow has been running for 5 hours."
              fi
              echo "Creating new workflow run and exiting current one."
              create_new_workflow_run
              exit 0
            fi
            
            sleep 30
          done
      - name: Rerun workflow if previous step failed
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.FINE_GRAINED_PAT }}
        run: |
          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/blank.yml/dispatches" \
            -d '{"ref":"main"}'
          echo "Workflow rerun triggered due to previous step failure"
